#!/bin/bash
#
# NAME
#       aws-sg-revoker  -- revokes access permission from security groups to public IP 
#				addresses outside of your AWS account
#
# SYNOPSIS
#	aws-sg-revoker	[ -l ]  
#			[-g security-group-name ] 
#			[ -w IP-address ] [-w IP-address ] ...
#
# OPTIONS
#	-l list the suspect IP addresses only
#	-w regexp of whitelisted IP address 
#	-g security-group-name to generate revokes for
# 
# DESCRIPTION
#       generates aws IP permissions revokes for every IP address not in the account or not 
#	in the whitelist. By default, 0.0.0.0/0 and all private IP address ranges 
#	are whitelisted.
#
#	The -l option shows all the IP addresses and attempts to do a DNS reverse lookup.
#
# 	the commands are not executed automatically. You should do this, by piping it to a shell:
#
#		$ aws-sg-revoker | tee revoked.log | bash
#
# USAGE
#	To list all the ip addresses or ranges that are not defined in your account, type:
#
#		$ aws-sg-revoker -l  
#
#	To list all the ip addresses or ranges that are not defined in your account of a specific
#	security group, type:
#
#		$ aws-sg-revoker -l  -w  $(curl -s http://myip.dnsomatic.com)
#
#	To list all the ip addresses or ranges that are not defined in your account, 
#	except your own ip address, type:
#
#		$ aws-sg-revoker -l  -w  $(curl -s http://myip.dnsomatic.com | sed 's/\./\\./g')
#
#	To see all the revoke commands for ip addresses or ranges not defined in your account, for
#	a specific security group, type:
#
#		$ aws-sg-revoker -g sg-name
#
#	to execute these commands, type:
#		$ aws-sg-revoker -g sg-name | tee revoked.log | bash
#	
#
# PREREQUISITES
#	you have to have installed on your system:
#		- aws cli
#		- jq
#
# CAVEATS
#	1) The script does not do CIDR block calculation. It uses regexp only. this 
#	   may accidentally cause an unidented removal.
#	2) Do not forget to escape your dot's for whitelist IP addresses :-) 
#
# AUTHOR
#	M.J. van Holsteijn 
#
# COPYRIGHT
#	aws-sg-revoker
#	Copyright (C) 2015 Xebia Nederland B.V.
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License along
#	with this program; if not, write to the Free Software Foundation, Inc.,
#	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
REGION=${AWS_DEFAULT_REGION:-$(aws configure get region 2>/dev/null)}
WHITELIST="0\.0\.0\.0/0|\
10\.\d{1,3}\.\d{1,3}\.\d{1,3}|\
192\.168\.\d{1,3}\.\d{1,3}|\
169\.254\.\d{1,3}\.\d{1,3}|\
127\.\d{1,3}\.\d{1,3}\.\d{1,3}|\
172.1[6-9]\.\d{1,3}\.\d{1,3}|\
172.2\d\.\d{1,3}\.\d{1,3}|\
172.3[0-1]\.\d{1,3}\.\d{1,3}"
LIST_IPS_ONLY=0
CIDRS_OUTSIDE_ACCOUNT=
SG_GROUP_NAME='*'


#
# Check whether we are sourced
#
[[ "$0" != "$BASH_SOURCE" ]] && SOURCED=1 || SOURCED=0

function checkPrerequisites() {
	JQ=$(which jq)
	if [ -z "$JQ" ] ; then 
		echo "ERROR: jq is missing from path. please install it. " >&2
		[ $SOURCED -eq 1 ] && return 1 || exit 1
	fi

	AWS=$(which aws)
	if [ -z "$AWS" ] ; then 
		echo "ERROR: aws cli is missing from path. please install it. " >&2
		[ $SOURCED -eq 1 ] && return 1 || exit 1
	fi

	USER_ID=$(aws iam get-user 2> /dev/null| jq -r .User.UserId 2> /dev/null)
	if [ -z "$USER_ID" ] ; then
		echo "ERROR: could not obtain your AWS user id. check your aws cli connectivity." >&2
		[ $SOURCED -eq 1 ] && return 1 || exit 1
	fi
}

function parseCommandLine() {
	USAGE="Usage: $(basename $0) [-l] [-g security-group-name ] [ -w IP-address ] [-w IP-address ] ..."

	checkPrerequisites

	while getopts "lw:g:" OPT; do
		case $OPT in
			l)
				LIST_IPS_ONLY=1
				;;
			w)
				WHITELIST="$WHITELIST|$OPTARG"
				;;
			g)
				SG_GROUP_NAME="$OPTARG"
				;;
			*)
				echo $USAGE >&2
				[ $SOURCED -eq 1 ] && return 1 || exit 1
				;;
		esac
	done

}

function listAllIpAddressesInAccount() {
	(
		aws --region $REGION ec2 describe-addresses | jq -r '.Addresses[] | .PublicIp' ;
		aws --region $REGION ec2 describe-instances | jq  -r '.Reservations[].Instances[] | select(.PublicIpAddress) | .PublicIpAddress'  
	) | \
	sort -u
}

function describeSecurityGroups() {
	aws --region $REGION ec2 describe-security-groups --filter Name=group-name,Values=$SG_GROUP_NAME 
}

function listAllReferencedCidrs() {
	describeSecurityGroups | \
	jq  -r '.SecurityGroups[] | ( .IpPermissions[] |.IpRanges[] | select(.CidrIp) | .CidrIp )'  | \
	sort -u 
}	

function listAllReferencedCidrsExcludingWhitelisted() {
	listAllReferencedCidrs | egrep -v "$WHITELIST"
}	

function listCidrsOutsideAccount() {
	if [ -z "$CIDRS_OUTSIDE_ACCOUNT" ] ; then
		listAllIpAddressesInAccount > ${TMPDIR:-/tmp}/$$_ips_in_account 
		listAllReferencedCidrsExcludingWhitelisted | sed -e 's/\/32//' > ${TMPDIR:-/tmp}/$$_ips_referenced
		CIDRS_OUTSIDE_ACCOUNT=$(comm -1 -3 ${TMPDIR:-/tmp}/$$_ips_in_account ${TMPDIR:-/tmp}/$$_ips_referenced)
		rm ${TMPDIR:-/tmp}/$$_ips_in_account ${TMPDIR:-/tmp}/$$_ips_referenced
	fi
	echo "$CIDRS_OUTSIDE_ACCOUNT"
}


function listCidrsOutsideAccountByName() { 
	listCidrsOutsideAccount | while read IP ; do
		echo $IP "	" $(dig  +short -x $IP 2>/dev/null) 
	done
}

function generateRevokeIngressPermissions() {
	
	describeSecurityGroups | \
	jq  -r '.SecurityGroups[] | ( 
		"aws ec2 revoke-security-group-ingress --group-id " + 
		.GroupId +
		" " + 
		( .IpPermissions[] | 
			(if .FromPort then "--port " + (.FromPort|tostring) + "-" + (.ToPort|tostring)  else "" end) + 
			" " + 
			("--protocol " + .IpProtocol) + 
			"  " + 
			(.IpRanges[] | select(.CidrIp) | ("--cidr " + .CidrIp ))
		) +
		" # revoke from sg " + .GroupName 
	)'  | \
	egrep  $(listCidrsOutsideAccount | tr '\n' '|' | sed -e 's/\./\\./g' -e '$s/|$//' )
}

function generateRevokeCidrAddrs() {
	if parseCommandLine "$@" ; then
		if [ -n "$(listCidrsOutsideAccount)" ] ; then
			if [ $LIST_IPS_ONLY -eq 1 ] ; then
				listCidrsOutsideAccountByName
			else
				generateRevokeIngressPermissions 
			fi
		else
			echo "INFO: No CIDR outside account found." >&2
		fi
	fi
}

if [ $SOURCED -eq 0 ] ; then
	generateRevokeCidrAddrs "$@"
fi
